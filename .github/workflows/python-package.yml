# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  check:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} ${{ matrix.env.TOXENV }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu]
        python-version: [3.8]
        env:
          - TOXENV: check
          - TOXENV: check-docs
          - TOXENV: build-docs
    env: ${{ matrix.env}}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Poetry ${{ matrix.poetry-version }}
      uses: Gr1N/setup-poetry@v3
    - name: Get Poetry/pip cache dirs
      id: cache-dirs
      run: |
        echo "::set-output name=poetry::$(poetry config cache-dir)"
        echo "::set-output name=pip::$(pip cache dir)"
    - name: Cache Poetry/pip downloads
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.cache-dirs.outputs.poetry }}
          ${{ steps.cache-dirs.outputs.pip }}
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install -vv --no-root
    - name: Test with tox
      run: |
        poetry run tox -v

  test:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} unit tests (${{ matrix.env.DIST }})
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.6, 3.7, 3.8, 3.9.0-alpha - 3.9.0, pypy3]
        poetry-version: [1.0.10]
        env:
          - DIST: sdist
            WITH_COVERAGE: 1
          - DIST: wheel
            WITH_COVERAGE: 0
    runs-on: ${{ matrix.os }}-latest
    env: ${{ matrix.env}}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry ${{ matrix.poetry-version }}
      uses: Gr1N/setup-poetry@v3
    - name: Get Poetry/pip cache dirs
      id: cache-dirs
      run: |
        echo "::set-output name=poetry::$(poetry config cache-dir)"
        echo "::set-output name=pip::$(pip cache dir)"
    - name: Cache Poetry/pip downloads
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.cache-dirs.outputs.poetry }}
          ${{ steps.cache-dirs.outputs.pip }}
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install -vv --no-root
    - name: Install tox-gh-actions
      run: |
        poetry run pip install tox-gh-actions

    - name: Create wheel
      if: env.DIST == 'wheel'
      run: |
        poetry run python setup.py bdist_wheel
        python -c "from pathlib import Path; print('::set-env name=INSTALLPKG::--installpkg ' + str(next(Path('dist').glob('*.whl'))))"
    - name: Test with tox
      run: |
        poetry run tox -v ${{ env.INSTALLPKG }} -- -s


  regression:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} regression tests (${{ matrix.dist }})
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.8]
        poetry-version: [1.0.10]
        dist: [wheel]
    runs-on: ${{ matrix.os }}-latest
    env:
      TOXENV: regression
      DIST: ${{ matrix.dist }}
      WITH_COVERAGE: 1
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry ${{ matrix.poetry-version }}
      uses: Gr1N/setup-poetry@v3
    - name: Get Poetry/pip cache dirs
      id: cache-dirs
      run: |
        echo "::set-output name=poetry::$(poetry config cache-dir)"
        echo "::set-output name=pip::$(pip cache dir)"
    - name: Cache Poetry/pip downloads
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.cache-dirs.outputs.poetry }}
          ${{ steps.cache-dirs.outputs.pip }}
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Get Homebrew cache dir (macOS)
      id: cache-dirs-macos
      if: startsWith(runner.os, 'macOS')
      run: |
        echo "::set-output name=dir::$(brew --cache)"
    - name: Delete Homebrew cache dir to minimize cache size (macOS)
      if: startsWith(runner.os, 'macOS')
      run: |
        rm -vrf "$(brew --cache)"
    - name: Cache Homebrew downloads
      if: env.TOXENV == 'regression' && startsWith(runner.os, 'macOS')
      uses: actions/cache@v2
      with:
        path: ${{ steps.cache-dirs-macos.outputs.dir }}
        key: ${{ runner.os }}-homebrew-1

    - name: Get Chocolatey cache dir (Windows)
      id: cache-dirs-windows
      if: startsWith(runner.os, 'Windows')
      run: |
        echo "::set-output name=dir::$(echo $env:TEMP\chocolatey)"
    - name: Cache Cholocatey downloads
      if: env.TOXENV == 'regression' && startsWith(runner.os, 'Windows')
      uses: actions/cache@v2
      with:
        path: ${{ steps.cache-dirs-windows.outputs.dir }}
        key: ${{ runner.os }}-chocolatey

    - name: Install dependencies
      run: |
        poetry install -vv --no-root
    - name: Install tools required by the regression tests (Linux)
      if: env.TOXENV == 'regression' && startsWith(runner.os, 'Linux')
      run: |
        sudo apt-get install mupdf-tools imagemagick
    - name: Install tools required by the regression tests (macOS)
      if: env.TOXENV == 'regression' && startsWith(runner.os, 'macOS')
      run: |
        brew install mupdf-tools imagemagick
    - name: Install tools required by the regression tests (Windows)
      if: env.TOXENV == 'regression' && startsWith(runner.os, 'Windows')
      run: |
        choco install mupdf imagemagick.tool

    - name: Create wheel
      if: env.DIST == 'wheel'
      run: |
        poetry run python setup.py bdist_wheel
        python -c "from pathlib import Path; print('::set-env name=INSTALLPKG::--installpkg ' + str(next(Path('dist').glob('*.whl'))))"
    - name: Test with tox
      run: |
        poetry run tox -v ${{ env.INSTALLPKG }} -- -s
